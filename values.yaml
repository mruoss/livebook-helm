## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## e.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""
  ## Compatibility adaptations for Kubernetes platforms
  ##
  compatibility:
    ## Compatibility adaptations for Openshift
    ##
    openshift:
      ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
      ##
      adaptSecurityContext: auto

## @section Common parameters

## @param nameOverride String to partially override common.names.fullname template (will maintain the release name)
##
nameOverride: ""
## @param namespaceOverride String to fully override common.names.namespace
##
namespaceOverride: ""
## @param fullnameOverride String to fully override common.names.fullname template
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param kubeVersion Force target Kubernetes version (using Helm capabilities if not set)
##
kubeVersion: ""
## @param clusterDomain Default Kubernetes cluster domain
##
clusterDomain: cluster.local

## @section Livebook configuration parameters
## ref: https://github.com/livebook-dev/livebook?tab=readme-ov-file#environment-variables

livebook:
  ## Authentication parameters
  ##
  auth:
    ## @param livebook.auth.livebookPassword Password used to access Livebook. Must be at least 12 characters.
    ##
    livebookPassword: ""

    ## @param livebook.auth.existingSecret Optionally specify an existing secret holding the livebook password.
    ## Example:
    ## existingSecret:
    ##   name: "auth-secret"
    ##   keyMapping:
    ##     livebookPassword: "my-livebook-password"
    ##
    existingSecret: {}

  ## Clustering parameters
  ##
  clustering:
    ## @param livebook.clustering.livebookCookie [default: randomly set] Optionally define the cookie for running Livebook in a cluster.
    ##
    livebookCookie: ""

    ## @param livebook.clustering.existingSecret Optionally specify an existing secret holding values for `livebookCookie`.
    ## Example:
    ## existingSecret:
    ##   name: "clustering-secret"
    ##   keyMapping:
    ##     livebookCookie: "..."
    ##
    existingSecret: {}

  ## Networking parameters
  ##
  networking:
    ## @param livebook.networking.livebookSecretKeyBase [default: randomly set] Optionally define the cookie for running Livebook in a cluster.
    ##
    livebookSecretKeyBase: ""

    ## @param livebook.networking.existingSecret Optionally specify an existing secret holding values for `livebookSecretKeyBase`.
    ## Example:
    ## existingSecret:
    ##   name: "networking-secret"
    ##   keyMapping:
    ##     livebookSecretKeyBase: "..."
    ##
    existingSecret: {}

  ## S3 bucket authentication parameters
  ##

  s3:
    ## @param livebook.s3.livebookAwsCredentials [default: false] Whether or not to read the S3 credentials from environment variables.
    ## Set this to `true` if you set `awsSecretAccessKey` and `awsAccessKeyId`.
    ##
    livebookAwsCredentials: false

    ## @param livebook.s3.awsAccessKeyId S3 Access Key ID
    ##
    awsAccessKeyId: ""

    ## @param livebook.s3.awsSecretAccessKey S3 Secret Access Key
    ##
    awsSecretAccessKey: ""

    ## @param livebook.s3.existingSecret Optionally specify an existing secret holding values for `awsAccessKeyId` and `awsSecretAccessKey`.
    ## Example:
    ## existingSecret:
    ##   name: "s3-secret"
    ##   keyMapping:
    ##     awsAccessKeyId: "..."
    ##     awsSecretAccessKey: "..."
    ##
    existingSecret: {}

  ## Livebook image version
  ## @param livebook.image.registry [default: ghcr.io] Livebook image registry
  ## @param livebook.image.repository [default: livebook-dev/livebook] Livebook image repository
  ## @param livebook.image.tag Livebook image tag
  ## @param livebook.image.digest Livebook image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param livebook.image.pullPolicy Image pull policy
  ## @param livebook.image.pullSecrets Specify docker-registry secret names as an array
  ##
  image:
    registry: ghcr.io
    repository: livebook-dev/livebook
    tag: 0.16.2
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []

  ## @param livebook.replicaCount Number of livebook replicas to deploy
  ##
  replicaCount: 1

  ## @param livebook.extraEnvVars Extra environment variables to be set on Livebook container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param livebook.extraEnvVarsCM ConfigMap with extra environment variables
  ##
  extraEnvVarsCM: ""
  ## @param livebook.extraEnvVarsSecret Secret with extra environment variables
  ##
  extraEnvVarsSecret: ""
  ## @param livebook.command Default container command (useful when using custom images). Use array form
  ##
  command: []
  ## @param livebook.args Default container args (useful when using custom images). Use array form
  ##
  args: []
  ## @section Livebook deployment parameters

  ## @param livebook.schedulerName Specifies the schedulerName, if it's nil uses kube-scheduler
  ## https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param livebook.terminationGracePeriodSeconds In seconds, time the given to the Livebook pod needs to terminate gracefully
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
  ##
  terminationGracePeriodSeconds: ""
  ## Livebook deployment parameters
  ## Only when 'mode' is 'standalone'
  ##

  deployment:
    ## @param livebook.deployment.updateStrategy.type Deployment strategy type
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    ## e.g:
    ## updateStrategy:
    ##  type: RollingUpdate
    ##  rollingUpdate:
    ##    maxSurge: 25%
    ##    maxUnavailable: 25%
    ##
    updateStrategy:
      type: RollingUpdate

  ## @param livebook.automountServiceAccountToken Mount Service Account token in pod
  ##
  automountServiceAccountToken: true

  ## @param livebook.hostAliases Livebook pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param livebook.containerPorts.livebook Livebook container port to open
  ##
  containerPorts:
    livebook: 9000
  ## Livebook pod Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param livebook.podSecurityContext.enabled Enable pod Security Context
  ## @param livebook.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param livebook.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param livebook.podSecurityContext.fsGroup Group ID for the container
  ## @param livebook.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param livebook.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param livebook.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param livebook.podSecurityContext.fsGroupChangePolicy When K8s should preform chown on attached volumes
  ##
  podSecurityContext:
    enabled: true
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
    fsGroupChangePolicy: "OnRootMismatch"
  ## Livebook container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param livebook.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param livebook.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param livebook.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param livebook.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param livebook.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param livebook.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param livebook.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param livebook.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param livebook.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param livebook.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## @param livebook.podLabels Extra labels for Livebook pods
  ## Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param livebook.podAnnotations Annotations for Livebook pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param livebook.podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param livebook.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Node affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param livebook.nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param livebook.nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set.
    ## E.g.
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## @param livebook.nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set.
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param livebook.affinity Affinity for pod assignment. Evaluated as a template.
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}
  ## @param livebook.nodeSelector Node labels for pod assignment. Evaluated as a template.
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param livebook.tolerations Tolerations for pod assignment. Evaluated as a template.
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param livebook.topologySpreadConstraints Topology Spread Constraints for Livebook pods assignment spread across your cluster among failure-domains
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints: []
  ## @param livebook.priorityClassName Livebook pods' priorityClassName
  ##
  priorityClassName: ""
  ## @param livebook.runtimeClassName Name of the runtime class to be used by Livebook pods'
  ## ref: https://kubernetes.io/docs/concepts/containers/runtime-class/
  ##
  runtimeClassName: ""
  ## Livebook containers' resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  ## @param livebook.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if resources is set (resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "micro"
  ## @param livebook.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure extra options for liveness probe
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param livebook.livenessProbe.enabled Enable livenessProbe
  ## @param livebook.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param livebook.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param livebook.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param livebook.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param livebook.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  ## Configure extra options for readiness probe
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param livebook.readinessProbe.enabled Enable readinessProbe
  ## @param livebook.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param livebook.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param livebook.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param livebook.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param livebook.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  ## @param livebook.customLivenessProbe Override default liveness probe
  ##
  customLivenessProbe: {}
  ## @param livebook.customReadinessProbe Override default readiness probe
  ##
  customReadinessProbe: {}
  ## @param livebook.customStartupProbe Override default startup probe
  ##
  customStartupProbe: {}
  ## @param livebook.lifecycleHooks for the Livebookcontainer(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param livebook.extraVolumes Optionally specify extra list of additional volumes for Livebook pods
  ##
  extraVolumes: []
  ## @param livebook.extraVolumeMounts Optionally specify extra list of additional volumeMounts for Livebook container(s)
  ##
  extraVolumeMounts: []
  ## @param livebook.initContainers Add additional init containers to the Livebook pods
  ## e.g:
  ## initContainers:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  initContainers: []
  ## @param livebook.sidecars Add additional sidecar containers to the Livebook pods
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @section Traffic exposure parameters

  ## Livebook Service properties
  ##
  service:
    ## @param livebook.service.type Livebook service type
    ##
    type: ClusterIP
    ## @param livebook.service.ports.livebook Livebook service port
    ##
    ports:
      livebook: 9000
    ## @param livebook.service.nodePorts.livebook Specify the Livebook NodePort value for the LoadBalancer and NodePort service types
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      livebook: ""
    ## @param livebook.service.clusterIP Service Cluster IP
    ## e.g.:
    ## clusterIP: None
    ##
    clusterIP: ""
    ## @param livebook.service.loadBalancerIP loadBalancerIP if service type is `LoadBalancer` (optional, cloud specific)
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
    ##
    loadBalancerIP: ""
    ## @param livebook.service.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## e.g:
    ## loadBalancerSourceRanges:
    ##   - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param livebook.service.externalTrafficPolicy Enable client source IP preservation
    ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ##
    externalTrafficPolicy: Cluster
    ## @param livebook.service.extraPorts Extra ports to expose in the service (normally used with the `sidecar` value)
    ##
    extraPorts: []
    ## @param livebook.service.annotations Annotations for Livebook service
    ## This can be used to set the LoadBalancer service type to internal only.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    annotations: {}
    ## Headless service properties
    ##
    headless:
      ## @param livebook.service.headless.annotations Annotations for the headless service.
      ##
      annotations: {}
  ## Configure the ingress resource that allows you to access Livebook. Set up the URL
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## @param livebook.ingress.enabled Enable ingress controller resource for Livebook
    ##
    enabled: true
    ## @param livebook.ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion: ""
    ## @param livebook.ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster.
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    ## @param livebook.ingress.hostname Default host for the ingress resource
    ##
    hostname: livebook.local
    ## @param livebook.ingress.path The Path to Livebook. You may need to set this to '/*' in order to use this with ALB ingress controllers.
    ##
    path: /
    ## @param livebook.ingress.pathType Ingress path type
    ##
    pathType: Prefix
    ## @param livebook.ingress.servicePort Service port to be used
    ## Default is http. Alternative is https.
    ##
    servicePort: livebook-main
    ## @param livebook.ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations: {}
    ## @param livebook.ingress.tls Enable TLS configuration for the hostname defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
    tls: false
    ## @param livebook.ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param livebook.ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
    ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
    ## e.g:
    ## extraHosts:
    ##   - name: livebook.local
    ##     path: /
    ##
    extraHosts: []
    ## @param livebook.ingress.extraPaths Any additional paths that may need to be added to the ingress under the main host
    ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
    ## extraPaths:
    ## - path: /*
    ##   backend:
    ##     serviceName: ssl-redirect
    ##     servicePort: use-annotation
    ##
    extraPaths: []
    ## @param livebook.ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## e.g:
    ## extraTls:
    ## - hosts:
    ##     - livebook.local
    ##   secretName: livebook.local-tls
    ##
    extraTls: []
    ## @param livebook.ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate are expected in PEM format
    ## name should line up with a secretName set further up
    ##
    ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
    ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ##
    ## Example
    ## secrets:
    ##   - name: livebook.local-tls
    ##     key: ""
    ##     certificate: ""
    ##
    secrets: []
    ## @param livebook.ingress.extraRules Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []

  ## Enable persistence for Livebook data folder using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
  ##
  persistence:
    ## @param livebook.persistence.enabled Enable Livebook data persistence using PVC. If false, use emptyDir
    ##
    enabled: false
    ## @param livebook.persistence.storageClass PVC Storage Class for Livebook data volume
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: ""
    ## @param livebook.persistence.mountPath Data volume mount path
    ##
    mountPath: "/data"
    ## @param livebook.persistence.accessModes PVC Access Modes for Livebook data volume
    ##
    accessModes:
      - ReadWriteOnce
    ## @param livebook.persistence.size PVC Storage Request for Livebook data volume
    ##
    size: 8Gi
    ## @param livebook.persistence.annotations Annotations for the PVC
    ##
    annotations: {}
    ## @param livebook.persistence.existingClaim Name of an existing PVC to use (only in `standalone` mode)
    ##
    existingClaim: ""

  ## @section Volume Permissions parameters
  volumePermissions:
    ## @param livebook.volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`
    ##
    enabled: false
    ## @param livebook.volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
    ## @param livebook.volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
    ## @param livebook.volumePermissions.image.tag Init container volume-permissions image tag
    ## @param livebook.volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param livebook.volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
    ## @param livebook.volumePermissions.image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r46
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## Init container' resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param livebook.volumePermissions.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param livebook.volumePermissions.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## Init container' Security Context
    ## Note: the chown of the data folder is done to containerSecurityContext.runAsUser
    ## and not the below volumePermissions.containerSecurityContext.runAsUser
    ## @param livebook.volumePermissions.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param livebook.volumePermissions.containerSecurityContext.runAsUser User ID for the init container
    ##
    containerSecurityContext:
      seLinuxOptions: {}
      runAsUser: 0
  ## @section RBAC parameters

  ## Specifies whether a ServiceAccount should be created
  ##
  serviceAccount:
    ## @param livebook.serviceAccount.create Enable the creation of a ServiceAccount for Livebook pods
    ##
    create: true
    ## @param livebook.serviceAccount.name Name of the created ServiceAccount
    ## If not set and create is true, a name is generated using the common.names.fullname template
    ##
    name: ""
    ## @param livebook.serviceAccount.automountServiceAccountToken Enable/disable auto mounting of the service account token
    ##
    automountServiceAccountToken: true
    ## @param livebook.serviceAccount.annotations Custom annotations for Livebook ServiceAccount
    ##
    annotations: {}
  ## @section Other parameters

  ## Livebook Pod Disruption Budget configuration in distributed mode.
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  ##
  pdb:
    ## @param livebook.pdb.create Enable/disable a Pod Disruption Budget creation
    ##
    create: true
    ## @param livebook.pdb.minAvailable Minimum number/percentage of pods that must still be available after the eviction
    ##
    minAvailable: ""
    ## @param livebook.pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable after the eviction
    ##
    maxUnavailable: ""
